#ts

// export from puppeteer
type KeyInput = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'Power' | 'Eject' | 'Abort' | 'Help' | 'Backspace' | 'Tab' | 'Numpad5' | 'NumpadEnter' | 'Enter' | '\r' | '\n' | 'ShiftLeft' | 'ShiftRight' | 'ControlLeft' | 'ControlRight' | 'AltLeft' | 'AltRight' | 'Pause' | 'CapsLock' | 'Escape' | 'Convert' | 'NonConvert' | 'Space' | 'Numpad9' | 'PageUp' | 'Numpad3' | 'PageDown' | 'End' | 'Numpad1' | 'Home' | 'Numpad7' | 'ArrowLeft' | 'Numpad4' | 'Numpad8' | 'ArrowUp' | 'ArrowRight' | 'Numpad6' | 'Numpad2' | 'ArrowDown' | 'Select' | 'Open' | 'PrintScreen' | 'Insert' | 'Numpad0' | 'Delete' | 'NumpadDecimal' | 'Digit0' | 'Digit1' | 'Digit2' | 'Digit3' | 'Digit4' | 'Digit5' | 'Digit6' | 'Digit7' | 'Digit8' | 'Digit9' | 'KeyA' | 'KeyB' | 'KeyC' | 'KeyD' | 'KeyE' | 'KeyF' | 'KeyG' | 'KeyH' | 'KeyI' | 'KeyJ' | 'KeyK' | 'KeyL' | 'KeyM' | 'KeyN' | 'KeyO' | 'KeyP' | 'KeyQ' | 'KeyR' | 'KeyS' | 'KeyT' | 'KeyU' | 'KeyV' | 'KeyW' | 'KeyX' | 'KeyY' | 'KeyZ' | 'MetaLeft' | 'MetaRight' | 'ContextMenu' | 'NumpadMultiply' | 'NumpadAdd' | 'NumpadSubtract' | 'NumpadDivide' | 'F1' | 'F2' | 'F3' | 'F4' | 'F5' | 'F6' | 'F7' | 'F8' | 'F9' | 'F10' | 'F11' | 'F12' | 'F13' | 'F14' | 'F15' | 'F16' | 'F17' | 'F18' | 'F19' | 'F20' | 'F21' | 'F22' | 'F23' | 'F24' | 'NumLock' | 'ScrollLock' | 'AudioVolumeMute' | 'AudioVolumeDown' | 'AudioVolumeUp' | 'MediaTrackNext' | 'MediaTrackPrevious' | 'MediaStop' | 'MediaPlayPause' | 'Semicolon' | 'Equal' | 'NumpadEqual' | 'Comma' | 'Minus' | 'Period' | 'Slash' | 'Backquote' | 'BracketLeft' | 'Backslash' | 'BracketRight' | 'Quote' | 'AltGraph' | 'Props' | 'Cancel' | 'Clear' | 'Shift' | 'Control' | 'Alt' | 'Accept' | 'ModeChange' | ' ' | 'Print' | 'Execute' | '\u0000' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'Meta' | '*' | '+' | '-' | '/' | ';' | '=' | ',' | '.' | '`' | '[' | '\\' | ']' | "'" | 'Attn' | 'CrSel' | 'ExSel' | 'EraseEof' | 'Play' | 'ZoomOut' | ')' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '(' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | ':' | '<' | '_' | '>' | '?' | '~' | '{' | '|' | '}' | '"' | 'SoftLeft' | 'SoftRight' | 'Camera' | 'Call' | 'EndCall' | 'VolumeDown' | 'VolumeUp';

#endts

using web;

[[description = "Get page's title.", blockly = "page's title"]]
define $.title: string
  => page with { component: "title" }

[[description = "Get page's html.", blockly = "page's html"]]
define $.html: string
  => page with { component: "html" }

[[description = "Get page's text.", blockly = "page's text"]]
define $.text: string
  => page with { component: "text" }

[[description = "Send a keyboard input to the page.", blockly = "press $(key)"]]
define $.key(key: KeyInput): void 
  => key

[[description = "Get innerHTML of elements matching the selector.", blockly = "innerHTML of $(selector=#id)"]]
define $(selector: string).html: string
  => selector with { component: "html" }

[[description = "Get innerText of an element matching the selector.", blockly = "innerText of $(selector=#id)"]]
define $(selector: string).text: string
  => selector with { component: "text" }

[[description = "Get the count of elements matching the selector.", blockly = "count of $(selector=#id)"]]
define $(selector: string).count: number
  => selector with { component: "count" }

[[description = "Click an element matching the selector.", blockly = "click $(selector=#id)"]]
define $(selector: string).click(): void
  => click

[[description = "Set the value of an input element matching the selector.", blockly = "set the value of $(selector=#id) to $(value)"]]
define $(selector: string).input(value: string): void
  => input

[[description = "Get the value of an input element matching the selector.", blockly = "get the value of $(selector=#id)"]]
define $(selector: string).value(): void
  => selector with { component: "value" }

using form;

[[description = "Click button with the given text.", blockly = "click Button with Text $(text)"]]
define win.buttonWithText(text: string).click(): void
  => byText with { action: "clickButton" }

[[description = "Input to a TextBox with the given name", blockly = "Input $(value) to TextBox whose Name = $(name=textBox1)"]]
define win.textBoxWithName(name: string).input(value: string): void
  => byName with { action: "inputTextBox" }

[[description = "Send a keyboard input to the window.", blockly = "press $(keys)"]]
define win.sendKey(keys: string): void
  => key

[[description = "Get form title.", blockly = "form's title"]]
define win.title: string
  => title

[[description = "Get the text of a control with the given name.", blockly = "text of the control whose Name = $(name=label1)"]]
define win.textOf(name: string): string
  => byName with { action: "text" }

[[description = "Get the IsChecked of a CheckBox or RadioButton.", blockly = "is $(name=checkBox1) checked?"]]
define win.isChecked(name: string): boolean
  => byName with { action: "checked" }

[[description = "Whether the given control is enabled", blockly = "is $(name=button1) enabled?"]]
define win.isEnabled(name: string): boolean
  => byName with { action: "enabled" }

[[description = "Whether the given control (by Text) is enabled", blockly = "is the control with Text $(text) enabled?"]]
define win.withText(text: string).enabled: boolean
  => byText with { action: "enabled" }

using graphics.turtle;

define g.screenshot(): string
  => screenshot
