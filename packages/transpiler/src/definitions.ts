import {
  Runtype,
  RRecord,
  RNumber,
  RString,
  RUnion,
  RLiteral,
  RFunction,
  RVoid,
} from "./runtypes-patch";

const KEYS = RUnion(
  RLiteral("0"),
  RLiteral("1"),
  RLiteral("2"),
  RLiteral("3"),
  RLiteral("4"),
  RLiteral("5"),
  RLiteral("6"),
  RLiteral("7"),
  RLiteral("8"),
  RLiteral("9"),
  RLiteral("Power"),
  RLiteral("Eject"),
  RLiteral("Abort"),
  RLiteral("Help"),
  RLiteral("Backspace"),
  RLiteral("Tab"),
  RLiteral("Numpad5"),
  RLiteral("NumpadEnter"),
  RLiteral("Enter"),
  RLiteral("\r"),
  RLiteral("\n"),
  RLiteral("ShiftLeft"),
  RLiteral("ShiftRight"),
  RLiteral("ControlLeft"),
  RLiteral("ControlRight"),
  RLiteral("AltLeft"),
  RLiteral("AltRight"),
  RLiteral("Pause"),
  RLiteral("CapsLock"),
  RLiteral("Escape"),
  RLiteral("Convert"),
  RLiteral("NonConvert"),
  RLiteral("Space"),
  RLiteral("Numpad9"),
  RLiteral("PageUp"),
  RLiteral("Numpad3"),
  RLiteral("PageDown"),
  RLiteral("End"),
  RLiteral("Numpad1"),
  RLiteral("Home"),
  RLiteral("Numpad7"),
  RLiteral("ArrowLeft"),
  RLiteral("Numpad4"),
  RLiteral("Numpad8"),
  RLiteral("ArrowUp"),
  RLiteral("ArrowRight"),
  RLiteral("Numpad6"),
  RLiteral("Numpad2"),
  RLiteral("ArrowDown"),
  RLiteral("Select"),
  RLiteral("Open"),
  RLiteral("PrintScreen"),
  RLiteral("Insert"),
  RLiteral("Numpad0"),
  RLiteral("Delete"),
  RLiteral("NumpadDecimal"),
  RLiteral("Digit0"),
  RLiteral("Digit1"),
  RLiteral("Digit2"),
  RLiteral("Digit3"),
  RLiteral("Digit4"),
  RLiteral("Digit5"),
  RLiteral("Digit6"),
  RLiteral("Digit7"),
  RLiteral("Digit8"),
  RLiteral("Digit9"),
  RLiteral("KeyA"),
  RLiteral("KeyB"),
  RLiteral("KeyC"),
  RLiteral("KeyD"),
  RLiteral("KeyE"),
  RLiteral("KeyF"),
  RLiteral("KeyG"),
  RLiteral("KeyH"),
  RLiteral("KeyI"),
  RLiteral("KeyJ"),
  RLiteral("KeyK"),
  RLiteral("KeyL"),
  RLiteral("KeyM"),
  RLiteral("KeyN"),
  RLiteral("KeyO"),
  RLiteral("KeyP"),
  RLiteral("KeyQ"),
  RLiteral("KeyR"),
  RLiteral("KeyS"),
  RLiteral("KeyT"),
  RLiteral("KeyU"),
  RLiteral("KeyV"),
  RLiteral("KeyW"),
  RLiteral("KeyX"),
  RLiteral("KeyY"),
  RLiteral("KeyZ"),
  RLiteral("MetaLeft"),
  RLiteral("MetaRight"),
  RLiteral("ContextMenu"),
  RLiteral("NumpadMultiply"),
  RLiteral("NumpadAdd"),
  RLiteral("NumpadSubtract"),
  RLiteral("NumpadDivide"),
  RLiteral("F1"),
  RLiteral("F2"),
  RLiteral("F3"),
  RLiteral("F4"),
  RLiteral("F5"),
  RLiteral("F6"),
  RLiteral("F7"),
  RLiteral("F8"),
  RLiteral("F9"),
  RLiteral("F10"),
  RLiteral("F11"),
  RLiteral("F12"),
  RLiteral("F13"),
  RLiteral("F14"),
  RLiteral("F15"),
  RLiteral("F16"),
  RLiteral("F17"),
  RLiteral("F18"),
  RLiteral("F19"),
  RLiteral("F20"),
  RLiteral("F21"),
  RLiteral("F22"),
  RLiteral("F23"),
  RLiteral("F24"),
  RLiteral("NumLock"),
  RLiteral("ScrollLock"),
  RLiteral("AudioVolumeMute"),
  RLiteral("AudioVolumeDown"),
  RLiteral("AudioVolumeUp"),
  RLiteral("MediaTrackNext"),
  RLiteral("MediaTrackPrevious"),
  RLiteral("MediaStop"),
  RLiteral("MediaPlayPause"),
  RLiteral("Semicolon"),
  RLiteral("Equal"),
  RLiteral("NumpadEqual"),
  RLiteral("Comma"),
  RLiteral("Minus"),
  RLiteral("Period"),
  RLiteral("Slash"),
  RLiteral("Backquote"),
  RLiteral("BracketLeft"),
  RLiteral("Backslash"),
  RLiteral("BracketRight"),
  RLiteral("Quote"),
  RLiteral("AltGraph"),
  RLiteral("Props"),
  RLiteral("Cancel"),
  RLiteral("Clear"),
  RLiteral("Shift"),
  RLiteral("Control"),
  RLiteral("Alt"),
  RLiteral("Accept"),
  RLiteral("ModeChange"),
  RLiteral(" "),
  RLiteral("Print"),
  RLiteral("Execute"),
  RLiteral("\u0000"),
  RLiteral("a"),
  RLiteral("b"),
  RLiteral("c"),
  RLiteral("d"),
  RLiteral("e"),
  RLiteral("f"),
  RLiteral("g"),
  RLiteral("h"),
  RLiteral("i"),
  RLiteral("j"),
  RLiteral("k"),
  RLiteral("l"),
  RLiteral("m"),
  RLiteral("n"),
  RLiteral("o"),
  RLiteral("p"),
  RLiteral("q"),
  RLiteral("r"),
  RLiteral("s"),
  RLiteral("t"),
  RLiteral("u"),
  RLiteral("v"),
  RLiteral("w"),
  RLiteral("x"),
  RLiteral("y"),
  RLiteral("z"),
  RLiteral("Meta"),
  RLiteral("*"),
  RLiteral("+"),
  RLiteral("-"),
  RLiteral("/"),
  RLiteral(";"),
  RLiteral("="),
  RLiteral(","),
  RLiteral("."),
  RLiteral("`"),
  RLiteral("["),
  RLiteral("\\"),
  RLiteral("]"),
  RLiteral("'"),
  RLiteral("Attn"),
  RLiteral("CrSel"),
  RLiteral("ExSel"),
  RLiteral("EraseEof"),
  RLiteral("Play"),
  RLiteral("ZoomOut"),
  RLiteral(")"),
  RLiteral("!"),
  RLiteral("@"),
  RLiteral("#"),
  RLiteral("$"),
  RLiteral("%"),
  RLiteral("^"),
  RLiteral("&"),
  RLiteral("("),
  RLiteral("A"),
  RLiteral("B"),
  RLiteral("C"),
  RLiteral("D"),
  RLiteral("E"),
  RLiteral("F"),
  RLiteral("G"),
  RLiteral("H"),
  RLiteral("I"),
  RLiteral("J"),
  RLiteral("K"),
  RLiteral("L"),
  RLiteral("M"),
  RLiteral("N"),
  RLiteral("O"),
  RLiteral("P"),
  RLiteral("Q"),
  RLiteral("R"),
  RLiteral("S"),
  RLiteral("T"),
  RLiteral("U"),
  RLiteral("V"),
  RLiteral("W"),
  RLiteral("X"),
  RLiteral("Y"),
  RLiteral("Z"),
  RLiteral(":"),
  RLiteral("<"),
  RLiteral("_"),
  RLiteral(">"),
  RLiteral("?"),
  RLiteral("~"),
  RLiteral("{"),
  RLiteral("|"),
  RLiteral("}"),
  RLiteral('"'),
  RLiteral("SoftLeft"),
  RLiteral("SoftRight"),
  RLiteral("Camera"),
  RLiteral("Call"),
  RLiteral("EndCall"),
  RLiteral("VolumeDown"),
  RLiteral("VolumeUp")
);

export const globals = (<const>{
  $: RRecord({
    title: RString.produces("web", () => ({
      method: "page",
      component: "title",
    })),
    html: RString.produces("web", () => ({
      method: "page",
      component: "html",
    })),
    text: RString.produces("web", () => ({
      method: "page",
      component: "text",
    })),
    key: RFunction(<const>{
      parameters: [KEYS],
      returns: RVoid.produces("web", ([key]) => ({
        method: "key",
        key,
      })),
    }),
  }).withCall(<const>{
    parameters: [RString],
    returns: RRecord({
      html: RString.produces("web", ([selector]) => ({
        method: "selector",
        selector,
        component: "html",
      })),
      text: RString.produces("web", ([selector]) => ({
        method: "selector",
        selector,
        component: "text",
      })),
      count: RNumber.produces("web", ([selector]) => ({
        method: "selector",
        selector,
        component: "count",
      })),
      click: RFunction(<const>{
        returns: RVoid.produces("web", ([selector]) => ({
          method: "click",
          selector,
        })),
      }),
      input: RFunction(<const>{
        parameters: [RString],
        returns: RVoid.produces("web", ([selector], [value]) => ({
          method: "value",
          selector,
          value,
        })),
      }),
    }),
  }),
}) satisfies Record<string, Runtype>;
